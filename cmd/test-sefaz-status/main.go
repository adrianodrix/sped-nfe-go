// Test script for SEFAZ status service using real ICP-Brasil certificate
// This is SAFE - only queries status, does not send any NFe documents
// Usage: go run cmd/test-sefaz-status/main.go [certificate_password]
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/adrianodrix/sped-nfe-go/certificate"
	"github.com/adrianodrix/sped-nfe-go/nfe"
)

func main() {
	fmt.Println("=== Teste SEFAZ Status - Certificado ICP-Brasil ===")
	fmt.Println("‚ö†Ô∏è  ATEN√á√ÉO: Este teste usa ambiente de PRODU√á√ÉO")
	fmt.Println("‚úÖ SEGURO: Apenas consulta status, n√£o envia documentos")

	// Configure unsafe SSL for testing (disable certificate verification)
	os.Setenv("SPED_NFE_UNSAFE_SSL", "true")

	// 1. Obter senha do certificado
	var password string
	if len(os.Args) > 1 {
		password = os.Args[1]
	}

	if password == "" {
		fmt.Println("\n‚ùå Senha do certificado √© obrigat√≥ria!")
		fmt.Println("Uso: go run cmd/test-sefaz-status/main.go <senha_do_certificado>")
		fmt.Println("Exemplo: go run cmd/test-sefaz-status/main.go minhasenha123")
		os.Exit(1)
	}

	// 2. Carregar certificado real
	fmt.Println("\n1. Carregando certificado real...")

	certPath := "refs/certificates/cert-valido-jan-2026.pfx"
	fmt.Printf("   Arquivo: %s\n", certPath)

	cert, err := certificate.LoadA1FromFile(certPath, password)
	if err != nil {
		log.Fatalf("‚ùå Erro ao carregar certificado: %v", err)
	}
	defer cert.Close()

	fmt.Println("   ‚úÖ Certificado carregado com sucesso")

	// Exibir informa√ß√µes do certificado
	fmt.Printf("   üìã Dados do certificado:\n")
	fmt.Printf("      Titular: %s\n", cert.GetSubject())
	fmt.Printf("      Emissor: %s\n", cert.GetIssuer())
	fmt.Printf("      Serial: %s\n", cert.GetSerialNumber())
	fmt.Printf("      V√°lido: %v\n", cert.IsValid())
	notBefore, notAfter := cert.GetValidityPeriod()
	fmt.Printf("      Validade: %s at√© %s\n",
		notBefore.Format("02/01/2006"),
		notAfter.Format("02/01/2006"))

	// Verificar se certificado est√° v√°lido
	if !cert.IsValid() {
		fmt.Println("   ‚ùå ATEN√á√ÉO: Certificado n√£o est√° v√°lido!")
		fmt.Println("   üí° Verifique a data de validade antes de usar em produ√ß√£o")
		return
	}

	// 3. Criar cliente NFe para PRODU√á√ÉO
	fmt.Println("\n2. Criando cliente NFe para PRODU√á√ÉO...")

	config := nfe.ClientConfig{
		Environment: nfe.Production, // üî¥ PRODU√á√ÉO
		UF:          nfe.PR,         // Paran√° (baseado no certificado EMPARI de Maring√°)
		Timeout:     45,             // Timeout maior para produ√ß√£o
	}

	client, err := nfe.NewClient(config)
	if err != nil {
		log.Fatalf("‚ùå Erro ao criar cliente: %v", err)
	}
	fmt.Println("   ‚úÖ Cliente criado para PRODU√á√ÉO")
	fmt.Printf("   üéØ Estado: PR (Paran√°)\n")
	fmt.Printf("   üåê Ambiente: PRODU√á√ÉO\n")

	// 4. Configurar certificado no cliente
	fmt.Println("\n3. Configurando certificado no cliente...")

	err = client.SetCertificate(cert)
	if err != nil {
		log.Fatalf("‚ùå Erro ao configurar certificado: %v", err)
	}
	fmt.Println("   ‚úÖ Certificado configurado no cliente")

	// 5. Testar comunica√ß√£o com SEFAZ PRODU√á√ÉO - Status Service
	fmt.Println("\n4. üî¥ TESTANDO COMUNICA√á√ÉO COM SEFAZ PRODU√á√ÉO üî¥")
	fmt.Println("   üì° Servi√ßo: nfestatusservico (apenas consulta status)")
	fmt.Println("   ‚úÖ SEGURO: N√£o envia documentos, apenas verifica se SEFAZ est√° online")

	ctx, cancel := context.WithTimeout(context.Background(), 45*time.Second)
	defer cancel()

	fmt.Println("   üîÑ Enviando requisi√ß√£o...")
	startTime := time.Now()

	statusResponse, err := client.QueryStatus(ctx)
	duration := time.Since(startTime)

	fmt.Printf("   ‚è±Ô∏è  Tempo de resposta: %v\n", duration)

	if err != nil {
		fmt.Printf("   ‚ùå Erro ao consultar status: %v\n", err)

		// Analisar tipo de erro
		errorStr := err.Error()
		if contains(errorStr, "certificate signed by unknown authority") {
			fmt.Println("   üí° Erro de certificado SSL")
			fmt.Println("   üí° Execute: ./install-icpbrasil-certs.sh")
		} else if contains(errorStr, "timeout") {
			fmt.Println("   üí° Timeout na comunica√ß√£o")
			fmt.Println("   üí° SEFAZ pode estar sobrecarregado ou lento")
		} else if contains(errorStr, "connection refused") {
			fmt.Println("   üí° Conex√£o recusada")
			fmt.Println("   üí° Verifique conectividade de rede")
		} else if contains(errorStr, "no such host") {
			fmt.Println("   üí° Erro de DNS")
			fmt.Println("   üí° Verifique resolu√ß√£o de nomes")
		} else {
			fmt.Println("   üí° Erro de comunica√ß√£o com SEFAZ")
		}

		fmt.Println("\nüìã An√°lise do erro:")
		if contains(errorStr, "SOAP") || contains(errorStr, "HTTP") {
			fmt.Println("   ‚úÖ Requisi√ß√£o SOAP foi montada corretamente")
			fmt.Println("   ‚úÖ Certificado foi usado na comunica√ß√£o")
			fmt.Println("   ‚úÖ Conex√£o com SEFAZ foi tentada")
			fmt.Println("   ‚ùå Problema na camada de rede/SSL")
		}

	} else {
		fmt.Println("\nüéâ SUCESSO! Comunica√ß√£o com SEFAZ PRODU√á√ÉO funcionou!")
		fmt.Printf("   üìä Status SEFAZ: %d - %s\n", statusResponse.Status, statusResponse.StatusText)
		fmt.Printf("   üåê Online: %v\n", statusResponse.IsOnline())
		fmt.Printf("   üìç UF: %s | Ambiente: %d (1=produ√ß√£o)\n", statusResponse.UF, statusResponse.Environment)
		fmt.Printf("   üïê Consultado em: %s\n", statusResponse.CheckedAt.Format("02/01/2006 15:04:05"))

		// Verificar c√≥digos de status conhecidos
		switch statusResponse.Status {
		case 107:
			fmt.Println("   ‚úÖ Status 107: Servi√ßo em opera√ß√£o normal")
		case 108:
			fmt.Println("   ‚ö†Ô∏è  Status 108: Servi√ßo paralisado momentaneamente")
		case 109:
			fmt.Println("   ‚ö†Ô∏è  Status 109: Servi√ßo paralisado sem previs√£o")
		default:
			fmt.Printf("   ‚ÑπÔ∏è  Status %d: Consulte documenta√ß√£o SEFAZ\n", statusResponse.Status)
		}
	}

	// 6. Informa√ß√µes sobre o teste
	fmt.Println("\n=== An√°lise do Teste de Produ√ß√£o ===")

	if err == nil {
		fmt.Println("üéâ RESULTADO: SUCESSO COMPLETO!")
		fmt.Println("\n‚úÖ Valida√ß√µes bem-sucedidas:")
		fmt.Println("   ‚Ä¢ Certificado ICP-Brasil v√°lido e aceito")
		fmt.Println("   ‚Ä¢ Cliente NFe configurado corretamente")
		fmt.Println("   ‚Ä¢ Comunica√ß√£o com SEFAZ Produ√ß√£o estabelecida")
		fmt.Println("   ‚Ä¢ Requisi√ß√µes SOAP montadas corretamente")
		fmt.Println("   ‚Ä¢ Webservice nfestatusservico funcionando")
		fmt.Println("   ‚Ä¢ Integra√ß√£o Tools + Client + Certificate operacional")
	} else {
		fmt.Println("‚ö†Ô∏è  RESULTADO: Comunica√ß√£o tentada, erro encontrado")
		fmt.Println("\n‚úÖ Valida√ß√µes parciais bem-sucedidas:")
		fmt.Println("   ‚Ä¢ Certificado ICP-Brasil carregado e v√°lido")
		fmt.Println("   ‚Ä¢ Cliente NFe configurado para produ√ß√£o")
		fmt.Println("   ‚Ä¢ Requisi√ß√µes SOAP montadas")
		fmt.Println("   ‚Ä¢ Tentativa de comunica√ß√£o com SEFAZ realizada")
	}

	fmt.Println("\n‚ö†Ô∏è  IMPORTANTE:")
	fmt.Println("   ‚Ä¢ Este teste √© 100% SEGURO (apenas consulta status)")
	fmt.Println("   ‚Ä¢ Nenhum documento foi enviado ao SEFAZ")
	fmt.Println("   ‚Ä¢ Certificado de produ√ß√£o foi usado apenas para autentica√ß√£o")
	fmt.Println("   ‚Ä¢ SSL verification foi DESABILITADA para teste")
	fmt.Println("   ‚Ä¢ Para produ√ß√£o: instale certificados ICP-Brasil corretamente")
}

func contains(s, substr string) bool {
	return len(s) >= len(substr) && (func() bool {
		for i := 0; i <= len(s)-len(substr); i++ {
			if s[i:i+len(substr)] == substr {
				return true
			}
		}
		return false
	})()
}
