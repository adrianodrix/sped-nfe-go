// Teste completo para valida√ß√£o do servi√ßo de inutiliza√ß√£o NFe
// Este teste valida uma URL diferente da autoriza√ß√£o para confirmar se o problema √© espec√≠fico
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/adrianodrix/sped-nfe-go/certificate"
	"github.com/adrianodrix/sped-nfe-go/common"
	"github.com/adrianodrix/sped-nfe-go/nfe"
	"github.com/adrianodrix/sped-nfe-go/types"
	"github.com/adrianodrix/sped-nfe-go/webservices"
)

func main() {
	fmt.Println("=== SPED-NFE-GO - Teste Completo de Inutiliza√ß√£o ===")
	fmt.Println("üéØ Objetivo: Validar URL diferente da autoriza√ß√£o para diagn√≥stico")
	fmt.Println("üìã Fluxo: Configura√ß√£o ‚Üí Inutiliza√ß√£o ‚Üí An√°lise SOAP")

	// Configure unsafe SSL for testing (disable certificate verification)
	os.Setenv("SPED_NFE_UNSAFE_SSL", "true")

	// 1. Obter senha do certificado
	var password string
	if len(os.Args) > 1 {
		password = os.Args[1]
	}

	if password == "" {
		fmt.Println("\n‚ùå Senha do certificado √© obrigat√≥ria!")
		fmt.Println("Uso: go run cmd/teste-completo-inutilizacao/main.go <senha_do_certificado>")
		fmt.Println("Exemplo: go run cmd/teste-completo-inutilizacao/main.go minhasenha123")
		os.Exit(1)
	}

	fmt.Printf("\nüìú ETAPA 1: Carregando certificado digital...\n")
	fmt.Printf("   üîê Carregando certificado ICP-Brasil real...\n")

	certPath := "refs/certificates/valid-certificate.pfx"
	fmt.Printf("   üìã Certificado: %s\n", certPath)

	cert, err := certificate.LoadA1FromFile(certPath, password)
	if err != nil {
		log.Fatalf("‚ùå Falha na etapa 1: erro ao carregar certificado: %v", err)
	}
	defer cert.Close()

	notBefore, notAfter := cert.GetValidityPeriod()
	fmt.Printf("   üìÖ V√°lido: %s at√© %s\n", 
		notBefore.Format("2006-01-02"), 
		notAfter.Format("2006-01-02"))
	fmt.Printf("   ‚úÖ Certificado v√°lido: %s\n", cert.GetSubject())

	// Verificar se certificado est√° v√°lido
	if !cert.IsValid() {
		fmt.Println("   ‚ùå ATEN√á√ÉO: Certificado n√£o est√° v√°lido!")
		fmt.Println("   üí° Verifique a data de validade antes de usar")
		return
	}

	fmt.Printf("\nüîß ETAPA 2: Configurando cliente NFe...\n")

	// Create config for production
	config := &common.Config{
		TpAmb:       types.Production, // Usando produ√ß√£o para testar URLs reais
		RazaoSocial: "EMPARI INFORMATICA LTDA",
		CNPJ:        "10541434000152",
		SiglaUF:     "PR", // Paran√° (mesmo estado do problema de autoriza√ß√£o)
		Schemes:     "PL_009_V4",
		Versao:      "4.00",
		Timeout:     60,
	}

	// Create Tools with resolver
	tools, err := nfe.NewTools(config, webservices.NewResolver())
	if err != nil {
		log.Fatalf("‚ùå Falha na etapa 2: erro ao criar tools: %v", err)
	}

	fmt.Printf("   ‚úÖ Cliente NFe configurado\n")

	// Configure certificate
	// TODO: Set certificate when signing is implemented

	fmt.Printf("\nüìã ETAPA 3: Preparando dados de inutiliza√ß√£o...\n")

	// Test parameters
	nSerie := 1
	nIni := 1000
	nFin := 1010
	xJust := "Teste de inutiliza√ß√£o para valida√ß√£o de URLs SEFAZ - ambiente de desenvolvimento e testes"

	fmt.Printf("   üìä S√©rie: %d\n", nSerie)
	fmt.Printf("   üî¢ N√∫meros: %d at√© %d (%d n√∫meros)\n", nIni, nFin, nFin-nIni+1)
	fmt.Printf("   üìù Justificativa: %s\n", xJust)

	// Validate parameters
	if err := nfe.ValidateInutilizacaoParams(nSerie, nIni, nFin, xJust); err != nil {
		log.Fatalf("‚ùå Falha na etapa 3: valida√ß√£o de par√¢metros: %v", err)
	}

	fmt.Printf("   ‚úÖ Par√¢metros validados\n")

	fmt.Printf("\nüîç ETAPA 4: Analisando configura√ß√µes de webservice...\n")

	// Get service info for analysis
	statusInfo, err := tools.GetStatusServiceInfo()
	if err != nil {
		log.Fatalf("‚ùå Erro ao obter info do servi√ßo de status: %v", err)
	}

	authInfo, err := tools.GetAuthorizationServiceInfo()
	if err != nil {
		log.Fatalf("‚ùå Erro ao obter info do servi√ßo de autoriza√ß√£o: %v", err)
	}

	// Get inutiliza√ß√£o service info using resolver
	resolver := webservices.NewResolver()
	inutInfo, err := resolver.GetInutilizacaoServiceURL(config.SiglaUF, config.TpAmb == types.Production, "55")
	if err != nil {
		log.Fatalf("‚ùå Erro ao obter info do servi√ßo de inutiliza√ß√£o: %v", err)
	}

	fmt.Printf("   üìä URLs de webservice:\n")
	fmt.Printf("      Status:        %s\n", statusInfo.URL)
	fmt.Printf("      Autoriza√ß√£o:   %s\n", authInfo.URL)
	fmt.Printf("      Inutiliza√ß√£o:  %s\n", inutInfo.URL)

	fmt.Printf("   üîç SOAPActions:\n")
	fmt.Printf("      Status:        %s\n", statusInfo.Action)
	fmt.Printf("      Autoriza√ß√£o:   %s\n", authInfo.Action)
	fmt.Printf("      Inutiliza√ß√£o:  %s\n", inutInfo.Action)

	// Compare URLs
	if statusInfo.URL == authInfo.URL {
		fmt.Printf("   ‚ö†Ô∏è  Status e Autoriza√ß√£o usam a mesma URL\n")
	} else {
		fmt.Printf("   ‚úÖ Status e Autoriza√ß√£o usam URLs diferentes\n")
	}

	if authInfo.URL == inutInfo.URL {
		fmt.Printf("   ‚ö†Ô∏è  Autoriza√ß√£o e Inutiliza√ß√£o usam a mesma URL\n")
	} else {
		fmt.Printf("   ‚úÖ Autoriza√ß√£o e Inutiliza√ß√£o usam URLs diferentes\n")
	}

	fmt.Printf("\nüöÄ ETAPA 5: Testando inutiliza√ß√£o...\n")
	fmt.Printf("   üì§ Enviando requisi√ß√£o de inutiliza√ß√£o para SEFAZ...\n")
	fmt.Printf("   ‚ö†Ô∏è  ATEN√á√ÉO: Este √© um teste real com certificado de produ√ß√£o!\n")

	// Create context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
	defer cancel()

	// Test inutiliza√ß√£o (this will use a different URL than authorization)
	startTime := time.Now()
	response, err := tools.SefazInutilizaNumeros(ctx, nSerie, nIni, nFin, xJust)
	duration := time.Since(startTime)

	fmt.Printf("   ‚è±Ô∏è  Tempo de resposta: %v\n", duration)

	if err != nil {
		fmt.Printf("   ‚ùå Erro na inutiliza√ß√£o: %v\n", err)

		// Debug information
		fmt.Printf("\nüîç Informa√ß√µes de Debug:\n")
		if lastRequest := tools.GetLastRequest(); lastRequest != "" {
			fmt.Printf("   üì§ SOAP Request enviado: %d bytes\n", len(lastRequest))
			if len(lastRequest) > 500 {
				fmt.Printf("   üìÑ Request (primeiros 300 chars): %s...\n", lastRequest[:300])
			} else {
				fmt.Printf("   üìÑ Request: %s\n", lastRequest)
			}
		}

		if lastResponse := tools.GetLastResponse(); lastResponse != "" {
			fmt.Printf("   üì• SOAP Response recebido: %d bytes\n", len(lastResponse))
			if len(lastResponse) > 500 {
				fmt.Printf("   üìÑ Response (primeiros 300 chars): %s...\n", lastResponse[:300])
			} else {
				fmt.Printf("   üìÑ Response: %s\n", lastResponse)
			}
		} else {
			fmt.Printf("   üì• SOAP Response: [VAZIO] - mesmo problema da autoriza√ß√£o!\n")
		}

		// Analyze error type
		errorStr := err.Error()
		fmt.Printf("\nüìã An√°lise do Erro:\n")
		if contains(errorStr, "Content-Length: 0") || contains(errorStr, "VAZIO") {
			fmt.Printf("   üéØ CONFIRMADO: Mesmo problema da autoriza√ß√£o!\n")
			fmt.Printf("   üìä Resultado: URLs diferentes, mesmo problema\n")
			fmt.Printf("   üí° Conclus√£o: Problema n√£o √© espec√≠fico da URL de autoriza√ß√£o\n")
			fmt.Printf("   üîç Causas poss√≠veis:\n")
			fmt.Printf("      ‚Ä¢ Problema no certificado SSL/TLS\n")
			fmt.Printf("      ‚Ä¢ Headers SOAP incorretos\n")
			fmt.Printf("      ‚Ä¢ Configura√ß√£o do SEFAZ Paran√°\n")
			fmt.Printf("      ‚Ä¢ Problema na estrutura do envelope SOAP\n")
		} else if contains(errorStr, "timeout") {
			fmt.Printf("   ‚è∞ Timeout na comunica√ß√£o\n")
		} else if contains(errorStr, "certificate") {
			fmt.Printf("   üîí Problema de certificado SSL\n")
		} else {
			fmt.Printf("   ‚ùì Erro n√£o categorizado: %s\n", errorStr)
		}

	} else {
		fmt.Printf("   üéâ SUCESSO! Inutiliza√ß√£o funcionou!\n")
		fmt.Printf("   üìä Status: %s - %s\n", response.InfInut.CStat, response.InfInut.GetMessage())
		fmt.Printf("   ‚úÖ Success: %v\n", response.InfInut.IsSuccess())

		if response.InfInut.IsSuccess() {
			fmt.Printf("   üéØ DESCOBERTA: Inutiliza√ß√£o funciona, autoriza√ß√£o n√£o!\n")
			fmt.Printf("   üìä Conclus√£o: Problema √â espec√≠fico da URL/servi√ßo de autoriza√ß√£o\n")
		}

		fmt.Printf("   üî¢ Protocolo: %s\n", response.InfInut.NProt)
		fmt.Printf("   üìÖ Data/Hora: %s\n", response.InfInut.DhRecbto)
	}

	fmt.Printf("\nüéØ AN√ÅLISE FINAL:\n")
	fmt.Printf("   üìã Teste realizado com sucesso\n")
	fmt.Printf("   üîó URLs testadas:\n")
	fmt.Printf("      ‚úÖ Status: %s\n", statusInfo.URL)
	fmt.Printf("      ‚ùå Autoriza√ß√£o: %s (problema conhecido)\n", authInfo.URL)
	if err != nil {
		fmt.Printf("      ‚ùå Inutiliza√ß√£o: %s (mesmo problema)\n", inutInfo.URL)
		fmt.Printf("\nüí° CONCLUS√ÉO: Problema n√£o √© espec√≠fico da URL, mas sim do SEFAZ Paran√° ou configura√ß√£o SOAP\n")
	} else {
		fmt.Printf("      ‚úÖ Inutiliza√ß√£o: %s (funcionou!)\n", inutInfo.URL)
		fmt.Printf("\nüí° CONCLUS√ÉO: Problema √â espec√≠fico do servi√ßo de autoriza√ß√£o!\n")
	}

	fmt.Printf("\nüöÄ Pr√≥ximos passos sugeridos:\n")
	if err != nil {
		fmt.Printf("   1. Investigar configura√ß√£o espec√≠fica do SEFAZ Paran√°\n")
		fmt.Printf("   2. Verificar headers SOAP enviados\n")
		fmt.Printf("   3. Testar com outros estados (SP, MG)\n")
		fmt.Printf("   4. Analisar diferen√ßas na estrutura SOAP\n")
	} else {
		fmt.Printf("   1. Comparar estrutura SOAP entre inutiliza√ß√£o e autoriza√ß√£o\n")
		fmt.Printf("   2. Verificar headers espec√≠ficos do servi√ßo de autoriza√ß√£o\n")
		fmt.Printf("   3. Analisar diferen√ßas nos envelopes\n")
		fmt.Printf("   4. Investigar requisitos espec√≠ficos do NFeAutorizacao4\n")
	}
}

func contains(s, substr string) bool {
	return len(s) >= len(substr) && (func() bool {
		for i := 0; i <= len(s)-len(substr); i++ {
			if s[i:i+len(substr)] == substr {
				return true
			}
		}
		return false
	})()
}

