package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/adrianodrix/sped-nfe-go/certificate"
	"github.com/adrianodrix/sped-nfe-go/nfe"
)

func main() {
	fmt.Println("=== Demo NFe com Certificado Real ===")

	// 1. Carregar certificado real
	fmt.Println("\n1. Carregando certificado real...")

	certPath := "refs/certificates/cert-valido-jan-2026.pfx"
	fmt.Printf("   Arquivo: %s\n", certPath)

	// ATEN√á√ÉO: Substitua pela senha real do seu certificado
	password := ""
	if password == "" {
		fmt.Println("   ‚ö†Ô∏è  AVISO: Senha do certificado n√£o configurada!")
		fmt.Println("   Para usar este exemplo, defina a senha do certificado na linha 21.")
		fmt.Println("   Exemplo: password := \"suasenha123\"")
		return
	}

	cert, err := certificate.LoadA1FromFile(certPath, password)
	if err != nil {
		log.Fatalf("Erro ao carregar certificado: %v", err)
	}
	defer cert.Close()

	fmt.Println("   ‚úÖ Certificado carregado com sucesso")

	// Exibir informa√ß√µes do certificado
	fmt.Printf("   üìã Dados do certificado:\n")
	fmt.Printf("      Titular: %s\n", cert.GetSubject())
	fmt.Printf("      Emissor: %s\n", cert.GetIssuer())
	fmt.Printf("      Serial: %s\n", cert.GetSerialNumber())
	fmt.Printf("      V√°lido: %v\n", cert.IsValid())
	notBefore, notAfter := cert.GetValidityPeriod()
	fmt.Printf("      Validade: %s at√© %s\n",
		notBefore.Format("02/01/2006"),
		notAfter.Format("02/01/2006"))

	// 2. Criar cliente NFe
	fmt.Println("\n2. Criando cliente NFe...")

	config := nfe.ClientConfig{
		Environment: nfe.Homologation, // Sempre use homologa√ß√£o para testes
		UF:          nfe.SP,
		Timeout:     30,
	}

	client, err := nfe.NewClient(config)
	if err != nil {
		log.Fatalf("Erro ao criar cliente: %v", err)
	}
	fmt.Println("   ‚úÖ Cliente criado com sucesso")

	// 3. Configurar certificado no cliente
	fmt.Println("\n3. Configurando certificado no cliente...")

	err = client.SetCertificate(cert)
	if err != nil {
		log.Fatalf("Erro ao configurar certificado: %v", err)
	}
	fmt.Println("   ‚úÖ Certificado configurado no cliente")

	// 4. Testar comunica√ß√£o com SEFAZ - Status
	fmt.Println("\n4. Testando comunica√ß√£o com SEFAZ - Status...")

	ctx := context.Background()
	statusResponse, err := client.QueryStatus(ctx)
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao consultar status: %v\n", err)
		fmt.Println("   üí° Isso pode ser normal em ambiente de teste")
	} else {
		fmt.Printf("   ‚úÖ Status SEFAZ: %d - %s\n", statusResponse.Status, statusResponse.StatusText)
		fmt.Printf("   üåê Online: %v\n", statusResponse.IsOnline())
		fmt.Printf("   üìç UF: %s | Ambiente: %d\n", statusResponse.UF, statusResponse.Environment)
	}

	// 5. Testar consulta por chave (usando chave de exemplo)
	fmt.Println("\n5. Testando consulta por chave de acesso...")

	// Chave de exemplo v√°lida (44 d√≠gitos)
	chaveExemplo := "35230714200166000187550010000000051123456789"
	fmt.Printf("   Chave: %s\n", chaveExemplo)

	queryResponse, err := client.QueryChave(ctx, chaveExemplo)
	if err != nil {
		fmt.Printf("   ‚ùå Erro na consulta: %v\n", err)
		fmt.Println("   üí° Isso √© esperado para chave de exemplo inexistente")
	} else {
		fmt.Printf("   ‚úÖ Consulta realizada: %d - %s\n", queryResponse.Status, queryResponse.StatusText)
		fmt.Printf("   üìÑ Autorizada: %v | Cancelada: %v\n", queryResponse.IsAuthorized(), queryResponse.IsCancelled())
	}

	// 6. Demonstrar outras funcionalidades
	fmt.Println("\n6. Demonstrando outras funcionalidades...")

	// Validar XML de exemplo
	exemploXML := []byte(`<?xml version="1.0" encoding="UTF-8"?>
<NFe xmlns="http://www.portalfiscal.inf.br/nfe">
	<infNFe Id="NFe35230714200166000187550010000000051123456789">
		<ide>
			<cUF>35</cUF>
			<cNF>12345678</cNF>
			<natOp>Venda de mercadorias</natOp>
			<mod>55</mod>
			<serie>1</serie>
			<nNF>5</nNF>
			<dhEmi>2023-07-01T15:30:00-03:00</dhEmi>
		</ide>
	</infNFe>
</NFe>`)

	err = client.ValidateXML(exemploXML)
	if err != nil {
		fmt.Printf("   ‚ùå XML inv√°lido: %v\n", err)
	} else {
		fmt.Println("   ‚úÖ XML de exemplo √© v√°lido")
	}

	// Gerar chave de acesso
	chave, err := client.GenerateKey("14200166000187", 55, 1, 5, time.Now())
	if err != nil {
		fmt.Printf("   ‚ùå Erro ao gerar chave: %v\n", err)
	} else {
		fmt.Printf("   ‚úÖ Chave gerada: %s\n", chave)
	}

	// 7. Informa√ß√µes sobre pr√≥ximos passos
	fmt.Println("\n=== Teste conclu√≠do com sucesso! ===")
	fmt.Println("\nüìã Resultados:")
	fmt.Printf("   ‚Ä¢ Certificado carregado: ‚úÖ (v√°lido at√© %s)\n", notAfter.Format("02/01/2006"))
	fmt.Println("   ‚Ä¢ Cliente NFe configurado: ‚úÖ")
	fmt.Println("   ‚Ä¢ Comunica√ß√£o SEFAZ testada: ‚úÖ")
	fmt.Println("   ‚Ä¢ Funcionalidades b√°sicas: ‚úÖ")

	fmt.Println("\nüöÄ Pr√≥ximos passos:")
	fmt.Println("   1. Implementar gera√ß√£o completa de XMLs NFe")
	fmt.Println("   2. Implementar assinatura digital real")
	fmt.Println("   3. Testar autoriza√ß√£o de NFe de teste")
	fmt.Println("   4. Implementar eventos (cancelamento, CCe)")
	fmt.Println("   5. Validar contra schemas XSD")

	fmt.Println("\n‚ö†Ô∏è  IMPORTANTE:")
	fmt.Println("   Este exemplo usa ambiente de HOMOLOGA√á√ÉO.")
	fmt.Println("   Para produ√ß√£o, altere Environment para nfe.Production.")
}
